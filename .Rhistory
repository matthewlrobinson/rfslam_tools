knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rms)
library(mice)
library(ggRandomForests)
library(survival)
library(missRanger)
library(survminer)
library(glmnet)
library(pROC)
library(rfSLAM)
library(grid)
library(gridExtra)
library(ggsci)
library(pROC)
library(splines)
library(viridis)
library(rpart)
library(compareGroups)
library(tidyverse)
library(lubridate)
library(kableExtra)
library(rpart.plot)
setwd("~/workspace/SAFE/code/SLAM_ML/dshenker/RFSLAM_PACKAGE/RFSLAM")
devtools::load_all()
df <- readRDS("~/workspace/SAFE/code/SLAM_ML/dshenker/sample_modeling_df/rf_df_1_withvariantsplusimputed.rda")
drop <- c("rt_1", "rt_7", "rt_7p", "i.sev_died.7")
analysis_vec <- readRDS("~/workspace/SAFE/data/curated_data/SLAM_ML/for_templates/analysis_vector_Sep_22.rds")
analysis_vars <- c(analysis_vec, "dominant_clade", "vaccinated", "remdesivir", "remdesivir_24", "remdesivir_since_admit", "systemic_steroid", "systemic_steroid_24", "systemic_steroid_since_admit", "tocilizumab", "tocilizumab_admit", "variant")
all_vars_for_model <- c(analysis_vars, "rt_1", "rt_7", "rt_1p", "rt_7p", "i.sev_died.1", "i.sev_died.7", "pid", "int.n")
var_key <- read_csv("~/workspace/SAFE/code/SLAM_ML/dshenker/var_key.csv") #example variable key
df <- as.data.frame(calc_risk_times(df, "t.sd", "q6", 6, 24, "rt_1")) %>% select(all_vars_for_model[all_vars_for_model %in% names(.)]) %>% mutate_if(sapply(.,is.character), as.factor)
severe_ever <- df %>% group_by(pid) %>% slice(which.max(i.sev_died.1)) %>% select(pid, i.sev_died.1)
colnames(severe_ever) <- c("pid", "sev_ever")
df <- df %>% left_join(severe_ever, by = "pid")
df$i.sev_died.1_final <- relevel(df$i.sev_died.1, "0")
df$i.sev_died.1 <- NULL
target <- "i.sev_died.1_final"
drop <- c(drop, "i.sev_died.1", "sev_ever")
best_params <- tune_rf_params(df, target, id_col = "pid", risk_time_col = "rt_1p", patient_count_col = "int.n",drop, ntree_trys = c(100, 200), nodedepth_trys = c("Null", 3), nsplit_trys = c(5, 10), n.folds = 3, folds_stratifier = "sev_ever")
df$i.sev_died.1_final <- relevel(df$i.sev_died.1, "0")
df$i.sev_died.1 <- NULL
target <- "i.sev_died.1_final"
drop <- c(drop, "i.sev_died.1", "sev_ever")
final_model <- create_model(df[,!(names(df) %in% drop[drop != sym(target)])], target, id_col = "pid", risk_time_col = "rt_1p", patient_count_col = "int.n", ntree = 100, nodedepth = 3, nsplit = 10)
mymodel.1.full_1day <- final_model$model
p.cpiu.be.ppl_1day <- final_model$preds
feature_importance_plot(mymodel.1.full_1day, var_key) #plot feature importance
df$p.hat <- calibrate.model(p.cpiu.be.ppl_1day, df, target, "q6")
rf.auc(df)
library(RFSLAM)
devtools::load_all()
rf.auc(df)
pwd()
getwd()
devtools::load_all()
rf.auc(df)
auc.smooth(data = df, auc = rf.auc(df))
devtools::load_all()
library(RFSLAM)
auc.smooth(data = df, auc = rf.auc(df))
library(RFSLAM)
auc.smooth(data = df, auc = rf.auc(df))
devtools::load_all()
auc.smooth(data = df, auc = rf.auc(df))
df$i.sev_died.1_final
sum(df$i.sev_died.1_final)
as.character(as.numeric(df$i.sev_died.1_final))
as.numeric(as.character(df$i.sev_died.1_final))
sum(as.numeric(as.character(df$i.sev_died.1_final)))
library(RFSLAM)
devtools::load_all()
auc.smooth(data = df, auc = rf.auc(df))
library(RFSLAM)
devtools::load_all()
auc.smooth(data = df, auc = rf.auc(df))
library(RFSLAM)
devtools::load_all()
rf.auc(df)
library(RFSLAM)
devtools::load_all()
rf.auc(df)
auc.smooth(data = df, auc = rf.auc(df))
auc_smooth <- auc.smooth(data = df, auc = rf.auc(df))
auc_smooth
auc_smooth$auc * auc_smooth$num_individuals
(auc_smooth$auc * auc_smooth$num_individuals) / sum(auc_smooth$num_individuals)
sum(auc_smooth$auc * auc_smooth$num_individuals) / sum(auc_smooth$num_individuals))
sum((auc_smooth$auc * auc_smooth$num_individuals) / sum(auc_smooth$num_individuals))
mean(auc_smooth$auc)
library(RFSLAM)
devtools::load_all()
auc.smooth(df, rf.auc(df), "i.sev_died.1_final", "int.n")
library(RFSLAM)
devtools::load_all()
auc.smooth(df, rf.auc(df), "i.sev_died.1_final", "int.n")
patient_count_col <- "int.n"
df %>% group_by(!!patient_count_col)
df %>% group_by(int.n)
df %>% group_by(..patient_count_col)
df %>% group_by(patient_count_col)
df %>% group_by(as.symbol(patient_count_col))
df %>% group_by(any_of(patient_count_col))
df %>% group_by(any_of(c(patient_count_col)))
df %>% group_by({{patient_count_col}})
df %>% group_by(noquote({{patient_count_col}}))
patient_count_col <- noquote(patient_count_col)
df %>% group_by({{patient_count_col}})
library(RFSLAM)
devtools::load_all()
auc.smooth(df, rf.auc(df), "i.sev_died.1_final", "int.n")
library(RFSLAM)
devtools::load_all()
auc.smooth(df, rf.auc(df), "i.sev_died.1_final", "int.n")
df %>% dplyr::group_by(int.n) %>% dplyr::summarise(pos = sum(target))
library(RFSLAM)
devtools::load_all()
auc.smooth(df, rf.auc(df), "i.sev_died.1_final", "int.n")
library(RFSLAM)
devtools::load_all()
auc.smooth.return.single(df, rf.auc(df), "i.sev_died.1_final", "int.n")
library(RFSLAM)
devtools::load_all()
drop
knitr::opts_chunk$set(echo = TRUE)
best_params <- tune_rf_params(df, target, id_col = "pid", risk_time_col = "rt_1p", patient_count_col = "int.n",drop, ntree_trys = c(100, 200), nodedepth_trys = c("Null", 3), nsplit_trys = c(5, 10), n.folds = 3, folds_stratifier = "sev_ever")
library(RFSLAM)
devtools::load_all()
knitr::opts_chunk$set(echo = TRUE)
best_params <- tune_rf_params(df, target, id_col = "pid", risk_time_col = "rt_1p", patient_count_col = "int.n",drop, ntree_trys = c(100, 200), nodedepth_trys = c("Null", 3), nsplit_trys = c(5, 10), n.folds = 3, folds_stratifier = "sev_ever")
library(RFSLAM)
devtools::load_all()
best_params <- tune_rf_params(df, target, id_col = "pid", risk_time_col = "rt_1p", patient_count_col = "int.n",drop, ntree_trys = c(100, 200), nodedepth_trys = c("Null", 3), nsplit_trys = c(5, 10), n.folds = 3, folds_stratifier = "sev_ever")
best_params
df
drop
df
library(tidyverse)
library(rms)
library(mice)
library(ggRandomForests)
library(survival)
library(missRanger)
library(survminer)
library(glmnet)
library(pROC)
library(rfSLAM)
library(grid)
library(gridExtra)
library(ggsci)
library(pROC)
library(splines)
library(viridis)
library(rpart)
library(compareGroups)
library(tidyverse)
library(lubridate)
library(kableExtra)
library(rpart.plot)
devtools::load_all()
df <- readRDS("~/workspace/SAFE/code/SLAM_ML/dshenker/sample_modeling_df/rf_df_1_withvariantsplusimputed.rda")
drop <- c("rt_1", "rt_7", "rt_7p", "i.sev_died.7")
analysis_vec <- readRDS("~/workspace/SAFE/data/curated_data/SLAM_ML/for_templates/analysis_vector_Sep_22.rds")
analysis_vars <- c(analysis_vec, "dominant_clade", "vaccinated", "remdesivir", "remdesivir_24", "remdesivir_since_admit", "systemic_steroid", "systemic_steroid_24", "systemic_steroid_since_admit", "tocilizumab", "tocilizumab_admit", "variant")
all_vars_for_model <- c(analysis_vars, "rt_1", "rt_7", "rt_1p", "rt_7p", "i.sev_died.1", "i.sev_died.7", "pid", "int.n")
var_key <- read_csv("~/workspace/SAFE/code/SLAM_ML/dshenker/var_key.csv") #example variable key
df <- as.data.frame(calc_risk_times(df, "t.sd", "q6", 6, 24, "rt_1")) %>% select(all_vars_for_model[all_vars_for_model %in% names(.)]) %>% mutate_if(sapply(.,is.character), as.factor)
devtools::load_all()
df <- as.data.frame(calc_risk_times(df, "t.sd", "q6", 6, 24, "rt_1")) %>% select(all_vars_for_model[all_vars_for_model %in% names(.)]) %>% mutate_if(sapply(.,is.character), as.factor)
target <- "i.sev_died.1"
model_pieces_1day <- create_model(df[,!(names(df) %in% drop)], target, id_col = "pid", risk_time_col = "rt_1p", patient_count_col = "int.n")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rms)
library(mice)
library(ggRandomForests)
library(survival)
library(missRanger)
library(survminer)
library(glmnet)
library(pROC)
library(rfSLAM)
library(grid)
library(gridExtra)
library(ggsci)
library(pROC)
library(splines)
library(viridis)
library(rpart)
library(compareGroups)
library(tidyverse)
library(lubridate)
library(kableExtra)
library(rpart.plot)
setwd("~/workspace/SAFE/code/SLAM_ML/dshenker/RFSLAM_PACKAGE/RFSLAM")
devtools::load_all()
df <- readRDS("~/workspace/SAFE/code/SLAM_ML/dshenker/sample_modeling_df/rf_df_1_withvariantsplusimputed.rda")
drop <- c("rt_1", "rt_7", "rt_7p", "i.sev_died.7")
analysis_vec <- readRDS("~/workspace/SAFE/data/curated_data/SLAM_ML/for_templates/analysis_vector_Sep_22.rds")
analysis_vars <- c(analysis_vec, "dominant_clade", "vaccinated", "remdesivir", "remdesivir_24", "remdesivir_since_admit", "systemic_steroid", "systemic_steroid_24", "systemic_steroid_since_admit", "tocilizumab", "tocilizumab_admit", "variant")
all_vars_for_model <- c(analysis_vars, "rt_1", "rt_7", "rt_1p", "rt_7p", "i.sev_died.1", "i.sev_died.7", "pid", "int.n")
var_key <- read_csv("~/workspace/SAFE/code/SLAM_ML/dshenker/var_key.csv") #example variable key
df <- as.data.frame(calc_risk_times(df, "t.sd", "q6", 6, 24, "rt_1")) %>% select(all_vars_for_model[all_vars_for_model %in% names(.)]) %>% mutate_if(sapply(.,is.character), as.factor)
severe_ever <- df %>% group_by(pid) %>% slice(which.max(i.sev_died.1)) %>% select(pid, i.sev_died.1)
colnames(severe_ever) <- c("pid", "sev_ever")
df <- df %>% left_join(severe_ever, by = "pid")
df$i.sev_died.1_final <- relevel(df$i.sev_died.1, "0")
df$i.sev_died.1 <- NULL
target <- "i.sev_died.1_final"
drop <- c(drop, "i.sev_died.1", "sev_ever")
best_params <- tune_rf_params(df, target, id_col = "pid", risk_time_col = "rt_1p", patient_count_col = "int.n",drop, ntree_trys = c(100, 200), nodedepth_trys = c("Null", 3), nsplit_trys = c(5, 10), n.folds = 3, folds_stratifier = "sev_ever")
library(RFSLAM)
devtools::load_all()
knitr::opts_chunk$set(echo = TRUE)
best_params <- tune_rf_params(df, target, id_col = "pid", risk_time_col = "rt_1p", patient_count_col = "int.n",drop, ntree_trys = c(100, 200), nodedepth_trys = c("Null", 3), nsplit_trys = c(5, 10), n.folds = 3, folds_stratifier = "sev_ever")
best_params <- tune_rf_params(df, target, id_col = "pid", risk_time_col = "rt_1p", patient_count_col = "int.n",drop, ntree_trys = c(100), nodedepth_trys = c("Null"), nsplit_trys = c(5), n.folds = 2, folds_stratifier = "sev_ever")
best_params
best_params <- tune_rf_params(df, target, id_col = "pid", risk_time_col = "rt_1p", patient_count_col = "int.n",drop, ntree_trys = c(100), nodedepth_trys = c("Null"), nsplit_trys = c(5, 10), n.folds = 2, folds_stratifier = "sev_ever")
best_params
library(RFSLAM)
devtools::load_all()
best_params <- tune_rf_params(df, target, id_col = "pid", risk_time_col = "rt_1p", patient_count_col = "int.n",drop, ntree_trys = c(100), nodedepth_trys = c("Null"), nsplit_trys = c(5), n.folds = 3, folds_stratifier = "sev_ever")
library(RFSLAM)
devtools::load_all()
best_params <- tune_rf_params(df, target, id_col = "pid", risk_time_col = "rt_1p", patient_count_col = "int.n",drop, ntree_trys = c(100), nodedepth_trys = c("Null"), nsplit_trys = c(5), n.folds = 3, folds_stratifier = "sev_ever")
library(RFSLAM)
devtools::load_all()
best_params <- tune_rf_params(df, target, id_col = "pid", risk_time_col = "rt_1p", patient_count_col = "int.n",drop, ntree_trys = c(100), nodedepth_trys = c("Null"), nsplit_trys = c(5), n.folds = 3, folds_stratifier = "sev_ever")
best_params
best_params <- tune_rf_params(df, target, id_col = "pid", risk_time_col = "rt_1p", patient_count_col = "int.n",drop, ntree_trys = c(100), nodedepth_trys = c("NULL"), nsplit_trys = c(5), n.folds = 3, folds_stratifier = "sev_ever")
best_params <- tune_rf_params(df, target, id_col = "pid", risk_time_col = "rt_1p", patient_count_col = "int.n",drop, ntree_trys = c(100), nodedepth_trys = c("NULL"), nsplit_trys = c(5), n.folds = 3, folds_stratifier = "sev_ever")
best_params
knitr::opts_chunk$set(echo = TRUE)
best_params <- tune_rf_params(df, target, id_col = "pid", risk_time_col = "rt_1p", patient_count_col = "int.n",drop, ntree_trys = c(100, 200), nodedepth_trys = c("NULL", 3), nsplit_trys = c(5, 10), n.folds = 3, folds_stratifier = "sev_ever")
best_params
final_model <- create_model(df[,!(names(df) %in% drop[drop != sym(target)])], target, id_col = "pid", risk_time_col = "rt_1p", patient_count_col = "int.n", ntree = 100, nodedepth = 3, nsplit = 5)
mymodel.1.full_1day <- final_model$model
p.cpiu.be.ppl_1day <- final_model$preds
feature_importance_plot(mymodel.1.full_1day, var_key) #plot feature importance
df$p.hat <- calibrate.model(p.cpiu.be.ppl_1day, df, target, "q6")
show_aucs(df, target = "i.sev_died.1_final", pred_col_name = "p.hat", time_col_name = "q6")
analysis_plots(df, "i.sev_died.1_final", "pid", "p.hat", "q6", analysis_vars)
df <- readRDS("~/workspace/SAFE/code/SLAM_ML/dshenker/sample_modeling_df/rf_df_1_withvariantsplusimputed.rda")
drop <- c("rt_1", "rt_7", "rt_7p", "i.sev_died.7")
analysis_vec <- readRDS("~/workspace/SAFE/data/curated_data/SLAM_ML/for_templates/analysis_vector_Sep_22.rds")
analysis_vars <- c(analysis_vec, "dominant_clade", "vaccinated", "remdesivir", "remdesivir_24", "remdesivir_since_admit", "systemic_steroid", "systemic_steroid_24", "systemic_steroid_since_admit", "tocilizumab", "tocilizumab_admit", "variant")
all_vars_for_model <- c(analysis_vars, "rt_1", "rt_7", "rt_1p", "rt_7p", "i.sev_died.1", "i.sev_died.7", "pid", "int.n")
var_key <- read_csv("~/workspace/SAFE/code/SLAM_ML/dshenker/var_key.csv") #example variable key
df <- as.data.frame(calc_risk_times(df, "t.sd", "q6", 6, 24, "rt_1")) %>% select(all_vars_for_model[all_vars_for_model %in% names(.)]) %>% mutate_if(sapply(.,is.character), as.factor)
severe_ever <- df %>% group_by(pid) %>% slice(which.max(i.sev_died.1)) %>% select(pid, i.sev_died.1)
colnames(severe_ever) <- c("pid", "sev_ever")
df <- df %>% left_join(severe_ever, by = "pid")
df$i.sev_died.1_final <- relevel(df$i.sev_died.1, "0")
df$i.sev_died.1 <- NULL
target <- "i.sev_died.1_final"
drop <- c(drop, "i.sev_died.1", "sev_ever")
best_params <- tune_rf_params(df, target, id_col = "pid", risk_time_col = "rt_1p", patient_count_col = "int.n",drop, ntree_trys = c(100, 200), nodedepth_trys = c("NULL", 3), nsplit_trys = c(5, 10), n.folds = 3, folds_stratifier = "sev_ever")
devtools::document()
?analysis_plots
getwd()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rms)
library(mice)
library(ggRandomForests)
library(survival)
library(missRanger)
library(survminer)
library(glmnet)
library(pROC)
library(rfSLAM)
library(grid)
library(gridExtra)
library(ggsci)
library(pROC)
library(splines)
library(viridis)
library(rpart)
library(compareGroups)
library(tidyverse)
library(lubridate)
library(kableExtra)
library(rpart.plot)
setwd("~/workspace/SAFE/code/SLAM_ML/dshenker/RFSLAM_PACKAGE/RFSLAM")
devtools::load_all()
df <- readRDS("~/workspace/SAFE/code/SLAM_ML/dshenker/sample_modeling_df/rf_df_1_withvariantsplusimputed.rda")
drop <- c("rt_1", "rt_7", "rt_7p", "i.sev_died.7")
analysis_vec <- readRDS("~/workspace/SAFE/data/curated_data/SLAM_ML/for_templates/analysis_vector_Sep_22.rds")
analysis_vars <- c(analysis_vec, "dominant_clade", "vaccinated", "remdesivir", "remdesivir_24", "remdesivir_since_admit", "systemic_steroid", "systemic_steroid_24", "systemic_steroid_since_admit", "tocilizumab", "tocilizumab_admit", "variant")
all_vars_for_model <- c(analysis_vars, "rt_1", "rt_7", "rt_1p", "rt_7p", "i.sev_died.1", "i.sev_died.7", "pid", "int.n")
var_key <- read_csv("~/workspace/SAFE/code/SLAM_ML/dshenker/var_key.csv") #example variable key
df <- as.data.frame(calc_risk_times(df, "t.sd", "q6", 6, 24, "rt_1")) %>% select(all_vars_for_model[all_vars_for_model %in% names(.)]) %>% mutate_if(sapply(.,is.character), as.factor)
severe_ever <- df %>% group_by(pid) %>% slice(which.max(i.sev_died.1)) %>% select(pid, i.sev_died.1)
colnames(severe_ever) <- c("pid", "sev_ever")
df <- df %>% left_join(severe_ever, by = "pid")
df$i.sev_died.1_final <- relevel(df$i.sev_died.1, "0")
df$i.sev_died.1 <- NULL
target <- "i.sev_died.1_final"
drop <- c(drop, "i.sev_died.1", "sev_ever")
best_params <- tune_rf_params(df, target, id_col = "pid", risk_time_col = "rt_1p", patient_count_col = "int.n", time_col = "q6", drop, ntree_trys = c(100, 200), nodedepth_trys = c("NULL", 3), nsplit_trys = c(5, 10), n.folds = 3, folds_stratifier = "sev_ever")
knitr::opts_chunk$set(echo = TRUE)
data(pbc, package="survival")
pbc
pbcseq
knitr::opts_chunk$set(echo = TRUE)
tryCatch(
{find.package('rfSLAM')},
error=function(e){remotes::install_github("mattrosen/RFSLAM")}
)
tryCatch(
{find.package('rfslamtools')},
error=function(e){remotes::install_github("matthewlrobinson/rfslamtools")}
)
library(ggRandomForests)
library(rfSLAM)
library(tidyverse)
library(grid)
library(gridExtra)
library(ggsci)
library(rpart)
library(splines)
library(rpart.plot)
library(slider)
library(rfslamtools)
library(pROC)
library(caret)
data(pbc, package="survival")
var_key <-read_csv("https://raw.githubusercontent.com/matthewlrobinson/rfslamtools/main/vignettes/var_key.csv") #example variable key
pbcseq <- pbcseq %>%
arrange(id, futime) %>%
mutate(status = if_else(status == 2, 1, 0),
next_id = lead(id),
next_id = if_else(is.na(next_id),max(id),next_id),
death = if_else(id != next_id & status == 1,1,0)) %>%
select(-next_id)
pbcseq$max_cpiu <- (plyr::round_any(pbcseq$futime, 100, f = floor) / 100) + 1
final_cpius <- pbcseq %>% group_by(id) %>% dplyr::summarise(`max(cpiu)` = max(max_cpiu))
nrows_needed <- sum(final_cpius$`max(cpiu)`)
full_df <- as.data.frame(matrix(nrow = nrows_needed, ncol = 3))
colnames(full_df) <- c("id", "cpiu", "day")
count <- 0
for (i in 1:nrow(final_cpius)) {
days <- 0
curr_id <- final_cpius[i, "id"]
for (j in 1:final_cpius[i, "max(cpiu)"]$'max(cpiu)') {
full_df[count,] <- c(curr_id, j, days)
days <- days + 100
count <- count + 1
}
}
pbc_tomerge <- pbcseq %>% select(-c(max_cpiu))
test <- full_df %>% full_join(pbc_tomerge, by = c("id", "day"))
test <- arrange(test, id, day)
test[1, "cpiu"] <- 1
test <- test %>% dplyr::group_by(id) %>% fill(colnames(test), .direction = "down")
test <- data.frame(test)
test <- test[!is.na(test$day),]
test <- test %>% mutate(next_day = lead(day))
test$next_day <- ifelse((test$next_day == 0) | is.na(test$next_day), test[,"futime"], test[,"next_day"])
test$risk_time <- (test$next_day - test$day) / 100
test <- test %>% select(-c(futime, next_day))
test <- test %>% mutate(next_id = lead(id), next_death = lead(death))
test[(test$next_id == test$id) & (test$death == 1), "death"] <- 0
test <- test %>% select(-c(next_death))
test$risk_time <- ifelse(test$risk_time == 0, 1, test$risk_time)
create_labels <- function(df, x = 5) {
labels <- unlist(slide_index(df$death, df$day, max, .after = 300))
df$label <- labels
return(df)
}
final_df <- data.frame(test %>% dplyr::group_by(id) %>% dplyr::group_modify(.f = create_labels))
final_df$sex <- ifelse(final_df$sex == 'f', 1, 0)
final_df <- final_df %>% select(-c(next_id, death))
final_df$int.n <- final_df$cpiu
final_df <- filter(final_df, !duplicated(final_df[,c("id", "label")]) | label == 0) #ask about whether we should do this step or not
final_df$days_since_cpiu_start <- final_df$day - (final_df$cpiu - 1)*100
final_df$label <- as.factor(final_df$label)
final_df$id <- as.factor(final_df$id)
drop <- c("status")
df <- final_df
names(df)[names(df) == "id"] <- "pid"
best_params <- tune_rf_params(df = df, target = "label", id_col = "pid", risk_time_col = "risk_time", patient_count_col = "int.n", time_col = "cpiu", drop = drop, ntree_trys = c(100, 200), nodedepth_trys = c("NULL", 3), nsplit_trys = c(5, 10), n.folds = 3, folds_stratifier = "status")
best_params
forest <- create_model(df[,!(names(df) %in% drop[drop != sym("death")])], "label", "pid", "risk_time", "int.n", "cpiu", ntree = 100, nodedepth = NULL, nsplit = 5)
mymodel.1.full_1day <- forest$model
p.cpiu.be.ppl_1day <- forest$preds
df$p.hat <- calibrate.model(p.cpiu.be.ppl_1day, df, "label", "cpiu")
analysis_vars <- colnames(df %>% select(-c(pid, status, label, risk_time, int.n)))
analysis_plots(df, "label", "pid", "p.hat", "cpiu", analysis_vars)
feature_importance_plot(mymodel.1.full_1day, var_key, importance_threshold = 10) #plot feature importance
```
