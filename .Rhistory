grid.draw(g)
}
plot_time_varying_auc(sca1.df = df_with_predictions,
target = 'label',
patient_count_col =  'int.n',
time_col = 'cpiu')
#' @title Plot time varying AUC
#' @description \code{rf.auc} calculates the time varying AUC values and returns them in a dataframe
#' @param sca1.df the data
#' @param target String variable containing the name of the target
#' @param patient_count_col String variable containing the name of the column couting the patient number
#' @param time_col String variable containing the name of the column holding the CPIU number
#' @return shows a time-varying auc plot
#' @export
plot_time_varying_auc <- function(sca1.df = data, target, patient_count_col, time_col){
d1 <- rf.auc(sca1.df = data, target=target, patient_count_col=patient_count_col, time_col=time_col)
g1 <- d1 %>% ggplot(aes(x = time,y=auc)) + geom_point() + geom_smooth() + theme_classic() + ylab('AUC') + xlab(time_col) + ggtitle('Time-varying AUC')
g2 <- d1 %>% ggplot(aes(x = time, y = num_individuals)) + geom_line() + theme_classic() + ylab('Individuals included') + xlab(time_col)
g <- arrangeGrob(g1, g2, respect = TRUE, heights = c(1, 0.25), ncol = 1)
grid.newpage()
grid.draw(g)
}
plot_time_varying_auc(sca1.df = df_with_predictions,
target = 'label',
patient_count_col =  'int.n',
time_col = 'cpiu')
#' @title Plot time varying AUC
#' @description \code{rf.auc} calculates the time varying AUC values and returns them in a dataframe
#' @param sca1.df the data
#' @param target String variable containing the name of the target
#' @param patient_count_col String variable containing the name of the column couting the patient number
#' @param time_col String variable containing the name of the column holding the CPIU number
#' @return shows a time-varying auc plot
#' @export
plot_time_varying_auc <- function(sca1.df = data, target, patient_count_col, time_col){
d1 <- rf.auc(sca1.df = sca1.df, target=target, patient_count_col=patient_count_col, time_col=time_col)
g1 <- d1 %>% ggplot(aes(x = time,y=auc)) + geom_point() + geom_smooth() + theme_classic() + ylab('AUC') + xlab(time_col) + ggtitle('Time-varying AUC')
g2 <- d1 %>% ggplot(aes(x = time, y = num_individuals)) + geom_line() + theme_classic() + ylab('Individuals included') + xlab(time_col)
g <- arrangeGrob(g1, g2, respect = TRUE, heights = c(1, 0.25), ncol = 1)
grid.newpage()
grid.draw(g)
}
plot_time_varying_auc(sca1.df = df_with_predictions,
target = 'label',
patient_count_col =  'int.n',
time_col = 'cpiu')
d1
d1
h1 <- 'auc'
d1 %>% mutate(fred = !!sym(h1))
d1 %>% rename(fred = !!sym(h1))
#' @title Calculate time varying AUC dataframe
#' @description \code{rf.auc} calculates the time varying AUC values and returns them in a dataframe
#' @param sca1.df the data
#' @param target String variable containing the name of the target
#' @param patient_count_col String variable containing the name of the column couting the patient number
#' @param time_col String variable containing the name of the column holding the CPIU number
#' @return time varying AUC dataframe with one column for the CPIU and another for the AUC
#' @export
rf.auc <- function(sca1.df = data, target, patient_count_col, time_col){
sca1.df <- sca1.df %>% rename(
int.n = !!sym(patient_count_col),
target = !!sym(target),
this_time_col = !!sym(time_col)
)
index <- which(sca1.df$target == 1)# find all intervals where sca occurs
times <- sca1.df[index, "this_time_col"] # obtain times
status <- sca1.df[,"target"] # 0/1 indicators
int <- sca1.df[index, "int.n"] # interval numbers for sca
n <- length(index)
int <- int[order(times)] # order the event times
int <- unique(int)
n <- length(int)
auc.df.p <- data.frame(time = int, auc = rep(NA, n), num_individuals = rep(NA, n))
for(i in 1:n){
int.index <- which(sca1.df$int.n == int[i]) # only consider individuals at risk at the current interval in consideration
chf <- sca1.df[int.index, c("pid", "target", "p.hat")]
auc.df.p[i,2] <- auc(chf$target, chf$p.hat, quiet = TRUE)
auc.df.p[i,3] <- nrow(chf)
}
return(auc.df.p)
}
d1 <- rf.auc(sca1.df = df_with_predictions,
target = 'label',
patient_count_col =  'int.n',
time_col = 'cpiu')
d1
df_with_predictions
df_with_predictions %>% filter(cpiu == 1)
source("C:/rs/OneDrive - Johns Hopkins/rfslamtools/rfslamtools/R/rf_functions_p2.R", echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
tryCatch(
{find.package('rfSLAM')},
error=function(e){remotes::install_github("mattrosen/RFSLAM")}
)
tryCatch(
{find.package('rfslamtools')},
error=function(e){remotes::install_github("matthewlrobinson/rfslamtools")}
)
library(ggRandomForests)
library(rfSLAM)
library(tidyverse)
library(grid)
library(gridExtra)
library(ggsci)
library(rpart)
library(splines)
library(rpart.plot)
library(slider)
library(rfslamtools)
library(pROC)
library(caret)
data(pbc, package="survival")
var_key <-read_csv("https://raw.githubusercontent.com/matthewlrobinson/rfslamtools/main/vignettes/var_key.csv") #example variable key
pbcseq <- pbcseq %>%
arrange(id, futime) %>%
mutate(status = if_else(status == 2, 1, 0),
next_id = lead(id),
next_id = if_else(is.na(next_id),max(id),next_id),
death = if_else(id != next_id & status == 1,1,0)) %>%
select(-next_id)
pbcseq$max_cpiu <- (plyr::round_any(pbcseq$futime, 100, f = floor) / 100) + 1
final_cpius <- pbcseq %>% group_by(id) %>% dplyr::summarise(`max(cpiu)` = max(max_cpiu))
nrows_needed <- sum(final_cpius$`max(cpiu)`)
full_df <- as.data.frame(matrix(nrow = nrows_needed, ncol = 3))
colnames(full_df) <- c("id", "cpiu", "day")
count <- 0
for (i in 1:nrow(final_cpius)) {
days <- 0
curr_id <- final_cpius[i, "id"]
for (j in 1:final_cpius[i, "max(cpiu)"]$'max(cpiu)') {
full_df[count,] <- c(curr_id, j, days)
days <- days + 100
count <- count + 1
}
}
pbc_tomerge <- pbcseq %>% select(-c(max_cpiu))
test <- full_df %>% full_join(pbc_tomerge, by = c("id", "day"))
test <- arrange(test, id, day)
test[1, "cpiu"] <- 1
test <- test %>% dplyr::group_by(id) %>% fill(colnames(test), .direction = "down")
test <- data.frame(test)
test <- test[!is.na(test$day),]
test <- test %>% mutate(next_day = lead(day))
test$next_day <- ifelse((test$next_day == 0) | is.na(test$next_day), test[,"futime"], test[,"next_day"])
test$risk_time <- (test$next_day - test$day) / 100
test <- test %>% select(-c(futime, next_day))
test <- test %>% mutate(next_id = lead(id), next_death = lead(death))
test[(test$next_id == test$id) & (test$death == 1), "death"] <- 0
test <- test %>% select(-c(next_death))
test$risk_time <- ifelse(test$risk_time == 0, 1, test$risk_time)
create_labels <- function(df, x = 5) {
labels <- unlist(slide_index(df$death, df$day, max, .after = 300))
df$label <- labels
return(df)
}
final_df <- data.frame(test %>% dplyr::group_by(id) %>% dplyr::group_modify(.f = create_labels))
final_df$sex <- ifelse(final_df$sex == 'f', 1, 0)
final_df <- final_df %>% select(-c(next_id, death))
final_df$int.n <- final_df$cpiu
final_df <- filter(final_df, !duplicated(final_df[,c("id", "label")]) | label == 0) #ask about whether we should do this step or not
final_df$days_since_cpiu_start <- final_df$day - (final_df$cpiu - 1)*100
final_df$label <- as.factor(final_df$label)
final_df$id <- as.factor(final_df$id)
drop <- c("status")
df <- final_df %>% rename(pid = id)
best_params <- tune_rf_params(
df = df,
target = "label",
id_col = "pid",
risk_time_col = "risk_time",
patient_count_col = "int.n",
time_col = "cpiu",
drop = drop,
ntree_trys = c(100, 200),
nodedepth_trys = c("NULL", 3),
nsplit_trys = c(5, 10),
n.folds = 3,
folds_stratifier = "status"
)
source("C:/rs/OneDrive - Johns Hopkins/rfslamtools/rfslamtools/R/rf_functions_p1.R", echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
tryCatch(
{find.package('rfSLAM')},
error=function(e){remotes::install_github("mattrosen/RFSLAM")}
)
tryCatch(
{find.package('rfslamtools')},
error=function(e){remotes::install_github("matthewlrobinson/rfslamtools")}
)
library(ggRandomForests)
library(rfSLAM)
library(tidyverse)
library(grid)
library(gridExtra)
library(ggsci)
library(rpart)
library(splines)
library(rpart.plot)
library(slider)
library(rfslamtools)
library(pROC)
library(caret)
data(pbc, package="survival")
var_key <-read_csv("https://raw.githubusercontent.com/matthewlrobinson/rfslamtools/main/vignettes/var_key.csv") #example variable key
pbcseq <- pbcseq %>%
arrange(id, futime) %>%
mutate(status = if_else(status == 2, 1, 0),
next_id = lead(id),
next_id = if_else(is.na(next_id),max(id),next_id),
death = if_else(id != next_id & status == 1,1,0)) %>%
select(-next_id)
pbcseq$max_cpiu <- (plyr::round_any(pbcseq$futime, 100, f = floor) / 100) + 1
final_cpius <- pbcseq %>% group_by(id) %>% dplyr::summarise(`max(cpiu)` = max(max_cpiu))
nrows_needed <- sum(final_cpius$`max(cpiu)`)
full_df <- as.data.frame(matrix(nrow = nrows_needed, ncol = 3))
colnames(full_df) <- c("id", "cpiu", "day")
count <- 0
for (i in 1:nrow(final_cpius)) {
days <- 0
curr_id <- final_cpius[i, "id"]
for (j in 1:final_cpius[i, "max(cpiu)"]$'max(cpiu)') {
full_df[count,] <- c(curr_id, j, days)
days <- days + 100
count <- count + 1
}
}
pbc_tomerge <- pbcseq %>% select(-c(max_cpiu))
test <- full_df %>% full_join(pbc_tomerge, by = c("id", "day"))
test <- arrange(test, id, day)
test[1, "cpiu"] <- 1
test <- test %>% dplyr::group_by(id) %>% fill(colnames(test), .direction = "down")
test <- data.frame(test)
test <- test[!is.na(test$day),]
test <- test %>% mutate(next_day = lead(day))
test$next_day <- ifelse((test$next_day == 0) | is.na(test$next_day), test[,"futime"], test[,"next_day"])
test$risk_time <- (test$next_day - test$day) / 100
test <- test %>% select(-c(futime, next_day))
test <- test %>% mutate(next_id = lead(id), next_death = lead(death))
test[(test$next_id == test$id) & (test$death == 1), "death"] <- 0
test <- test %>% select(-c(next_death))
test$risk_time <- ifelse(test$risk_time == 0, 1, test$risk_time)
create_labels <- function(df, x = 5) {
labels <- unlist(slide_index(df$death, df$day, max, .after = 300))
df$label <- labels
return(df)
}
final_df <- data.frame(test %>% dplyr::group_by(id) %>% dplyr::group_modify(.f = create_labels))
final_df$sex <- ifelse(final_df$sex == 'f', 1, 0)
final_df <- final_df %>% select(-c(next_id, death))
final_df$int.n <- final_df$cpiu
final_df <- filter(final_df, !duplicated(final_df[,c("id", "label")]) | label == 0) #ask about whether we should do this step or not
final_df$days_since_cpiu_start <- final_df$day - (final_df$cpiu - 1)*100
final_df$label <- as.factor(final_df$label)
final_df$id <- as.factor(final_df$id)
drop <- c("status")
df <- final_df %>% rename(pid = id)
best_params <- tune_rf_params(
df = df,
target = "label",
id_col = "pid",
risk_time_col = "risk_time",
patient_count_col = "int.n",
time_col = "cpiu",
drop = drop,
ntree_trys = c(100, 200),
nodedepth_trys = c("NULL", 3),
nsplit_trys = c(5, 10),
n.folds = 3,
folds_stratifier = "status"
)
best_params
forest <- df %>%
select(-all_of(drop)) %>%
create_model("label", "pid", "risk_time", "int.n", "cpiu", ntree = 100, nodedepth = NULL, nsplit = 5)
df_with_predictions <- df %>%
mutate(p.hat =
calibrate.model(
p.hat = forest$preds,
rf.df.1 = df,
target_varname = "label",
time_varname = "cpiu")
)
analysis_vars <- df_with_predictions %>%
select(-c(pid, status, label, risk_time, int.n)) %>%
names()
feature_importance_plot(forest$model, var_key, importance_threshold = 10) #plot feature importance
rpart_summary(
rf.df.1 = df_with_predictions,
risk_col = 'p.hat',
vars_list = analysis_vars
)
plot_time_varying_auc(sca1.df = df_with_predictions,
target = 'label',
patient_count_col =  'int.n',
time_col = 'cpiu')
sca1.df <- df_with_predictions %>% rename(
int.n = !!sym(patient_count_col),
target = !!sym(target),
this_time_col = !!sym(time_col)
)
patient_count_col <-  'int.n'
target <- 'label'
time_col <- 'cpiu'
sca1.df <- df_with_predictions %>% rename(
int.n = !!sym(patient_count_col),
target = !!sym(target),
this_time_col = !!sym(time_col)
)
index <- which(sca1.df$target == 1)# find all intervals where sca occurs
index
times <- sca1.df[index, "this_time_col"] # obtain times
times
status <- sca1.df[,"target"] # 0/1 indicators
status
int <- sca1.df[index, "int.n"] # interval numbers for sca
int
n <- length(index)
int <- int[order(times)] # order the event times
int <- unique(int)
n <- length(int)
auc.df.p <- data.frame(time = int, auc = rep(NA, n), num_individuals = rep(NA, n))
auc.df.p
int.index <- which(sca1.df$int.n == int[i]) # only consider individuals at risk at the current interval in consideration
n <- 1
int.index <- which(sca1.df$int.n == int[i]) # only consider individuals at risk at the current interval in consideration
i <- 1
int.index <- which(sca1.df$int.n == int[i]) # only consider individuals at risk at the current interval in consideration
int.index
chf <- sca1.df[int.index, c("pid", "target", "p.hat")]
chf
auc.df.p[i,2] <- auc(chf$target, chf$p.hat, quiet = TRUE)
auc.df.p[i,2]
d1 <- df_with_predictions %>% filter(cpiu == 1)
auc(d1$label,d1$p.hat)
roc(d1$label,d1$p.hat)
roc(d1$label,d1$p.hat, plot = TRUE)
d1 <- df_with_predictions %>% filter(cpiu == 1, label != 1)
roc(d1$label,d1$p.hat, plot = TRUE)
table(df_with_predictions$label)
d1 <- df_with_predictions %>% filter(cpiu == 1, label != 1)
roc(d1$label,d1$p.hat, plot = TRUE)
df_with_predictions
df
df %>% select(pid, cpiu, int.n, risk_time, label)
df %>% select(pid, cpiu, int.n, risk_time, label) %>% filter(int.n != cpiu)
d1 <- df_with_predictions %>% filter(cpiu == 1)
roc(d1$label,d1$p.hat, plot = TRUE)
df_with_predictions
roc(d1$label,d1$p.hat, plot = TRUE)
roc(d1$label,d1$p.hat, plot = TRUE, auc = TRUE)
df_with_predictions %>% ggplot(aes(x = bili, y = p.hat)) + geom_smooth(se = FALSE, show.legend = FALSE)
df_with_predictions %>% ggplot(aes(x = bili, y = p.hat)) + geom_smooth(se = FALSE, show.legend = FALSE) +
xlab("bili") + ylab("Predicted Risk") + theme_classic() + lims(y = c(0,1))
df_with_predictions
analysis_vars
df_with_predictions %>% select(all_of(analysis_vars))
df_with_predictions %>% select(all_of(analysis_vars)) %>% select_if(~is.numeric(.) & all(. %nin% c(0,1)))
df_with_predictions %>% select(all_of(analysis_vars)) %>% select_if(~is.numeric(.) & all(!(. %in% c(0,1))))
df_with_predictions %>% select(all_of(analysis_vars)) %>% select_if(~is.numeric(.) & all(!(. %in% c(0,1)))) %>%
pivot_longer(-p.hat)
df_with_predictions %>% select(all_of(analysis_vars)) %>% select_if(~is.numeric(.) & all(!(. %in% c(0,1)))) %>%
pivot_longer(-p.hat) %>%
ggplot(aes(x = value, y= p.hat)) + geom_smooth(se = FALSE, show.legend = FALSE) +
ylab("Predicted Risk") + theme_classic() + lims(y = c(0,1)) +
facet_wrap(vars(name))
df_with_predictions %>% select(all_of(analysis_vars)) %>% select_if(~is.numeric(.) & all(!(. %in% c(0,1)))) %>%
pivot_longer(-p.hat) %>%
ggplot(aes(x = value, y= p.hat)) + geom_smooth(se = FALSE, show.legend = FALSE) +
ylab("Predicted Risk") + theme_classic() + lims(y = c(0,1)) +
facet_wrap(vars(name), scales = "free_x")
df_with_predictions %>% select(all_of(analysis_vars)) %>% select_if(~is.numeric(.) & all(!(. %in% c(0,1)))) %>%
pivot_longer(-p.hat) %>%
ggplot(aes(x = value, y= p.hat)) + geom_smooth(se = FALSE, show.legend = FALSE) +
ylab("Predicted Risk") + theme_classic() + #lims(y = c(0,1)) +
facet_wrap(vars(name), scales = "free_x")
df_with_predictions %>% select(all_of(analysis_vars)) %>% select_if(~is.numeric(.) & all(!(. %in% c(0,1)))) %>%
pivot_longer(-p.hat) %>%
ggplot(aes(x = value, y= p.hat)) + geom_smooth(se = FALSE, show.legend = FALSE) +
ylab("Predicted Risk") + theme_classic() + #lims(y = c(0,1)) +
facet_wrap(vars(name), scales = "free_x") +
scale_y_continuous(limtits = c(0,NA))
df_with_predictions %>% select(all_of(analysis_vars)) %>% select_if(~is.numeric(.) & all(!(. %in% c(0,1)))) %>%
pivot_longer(-p.hat) %>%
ggplot(aes(x = value, y= p.hat)) + geom_smooth(se = FALSE, show.legend = FALSE) +
ylab("Predicted Risk") + theme_classic() + #lims(y = c(0,1)) +
facet_wrap(vars(name), scales = "free_x") +
ylim(c(0,NA))
df_with_predictions %>% select(all_of(analysis_vars)) %>% select_if(~is.numeric(.) & all(!(. %in% c(0,1)))) %>%
pivot_longer(-p.hat) %>%
ggplot(aes(x = value, y= p.hat)) +
geom_point() +
geom_smooth(se = FALSE, show.legend = FALSE) +
ylab("Predicted Risk") + theme_classic() + #lims(y = c(0,1)) +
facet_wrap(vars(name), scales = "free_x") +
ylim(c(0,NA))
df_with_predictions %>% select(all_of(analysis_vars)) %>% select_if(~is.numeric(.) & all(!(. %in% c(0,1)))) %>%
pivot_longer(-p.hat) %>%
ggplot(aes(x = value, y= p.hat)) +
geom_point(alpha = 0.1) +
geom_smooth(se = FALSE, show.legend = FALSE) +
ylab("Predicted Risk") + theme_classic() +
facet_wrap(vars(name), scales = "free_x") +
ylim(c(0,NA))
df_with_predictions %>% select(all_of(analysis_vars)) %>% select_if(~is.numeric(.) & all(!(. %in% c(0,1)))) %>%
pivot_longer(-p.hat) %>%
ggplot(aes(x = value, y= p.hat)) +
geom_point(alpha = 0.01) +
geom_smooth(se = FALSE, show.legend = FALSE) +
ylab("Predicted Risk") + theme_classic() +
facet_wrap(vars(name), scales = "free_x") +
ylim(c(0,NA))
df_with_predictions %>% select(all_of(analysis_vars)) %>% select_if(~is.numeric(.) & all(!(. %in% c(0,1)))) %>%
pivot_longer(-p.hat) %>%
ggplot(aes(x = value, y= p.hat)) +
geom_point(alpha = 0.051) +
geom_smooth(se = FALSE, show.legend = FALSE) +
ylab("Predicted Risk") + theme_classic() +
facet_wrap(vars(name), scales = "free_x") +
ylim(c(0,NA))
df_with_predictions %>% select(all_of(analysis_vars)) %>% select_if(~is.numeric(.) & all(!(. %in% c(0,1)))) %>%
pivot_longer(-p.hat) %>%
ggplot(aes(x = value, y= p.hat)) +
#geom_point(alpha = 0.051) +
geom_smooth(se = FALSE, show.legend = FALSE) +
ylab("Predicted Risk") + theme_classic() +
facet_wrap(vars(name), scales = "free_x") +
ylim(c(0,NA))
df_with_predictions %>% select(all_of(analysis_vars)) %>% select_if(~is.numeric(.) & all(!(. %in% c(0,1)))) %>%
pivot_longer(-p.hat) %>%
ggplot(aes(x = value, y= p.hat)) +
geom_point(alpha = 0.051) +
geom_smooth(se = FALSE, show.legend = FALSE) +
ylab("Predicted Risk") + theme_classic() +
facet_wrap(vars(name), scales = "free_x") +
ylim(c(0,NA))
df_with_predictions %>% select(all_of(analysis_vars)) %>% select_if(~is.numeric(.) & all(!(. %in% c(0,1)))) %>%
pivot_longer(-p.hat) %>%
ggplot(aes(x = value, y= p.hat)) +
#geom_point(alpha = 0.051) +
geom_smooth(se = FALSE, show.legend = FALSE) +
ylab("Predicted Risk") + theme_classic() +
facet_wrap(vars(name), scales = "free_x") +
ylim(c(0,NA))
df_with_predictions %>% select(all_of(analysis_vars)) %>% select_if(~is.numeric(.) & all(!(. %in% c(0,1)))) %>%
pivot_longer(-p.hat) %>%
ggplot(aes(x = value, y= p.hat)) +
geom_smooth(se = FALSE, show.legend = FALSE) +
geom_point(alpha = 0.051) +
ylab("Predicted Risk") + theme_classic() +
facet_wrap(vars(name), scales = "free_x") +
ylim(c(0,NA))
df_with_predictions %>% select(all_of(analysis_vars)) %>% select_if(~is.numeric(.) & all(!(. %in% c(0,1)))) %>%
pivot_longer(-p.hat) %>%
ggplot(aes(x = value, y= p.hat)) +
geom_smooth(se = FALSE, show.legend = FALSE, method = 'loess') +
geom_point(alpha = 0.051) +
ylab("Predicted Risk") + theme_classic() +
facet_wrap(vars(name), scales = "free_x") +
ylim(c(0,NA))
df_with_predictions %>% select(all_of(analysis_vars)) %>% select_if(~is.numeric(.) & all(!(. %in% c(0,1)))) %>%
pivot_longer(-p.hat) %>%
ggplot(aes(x = value, y= p.hat)) +
geom_point(alpha = 0.01) +
geom_smooth(se = FALSE, show.legend = FALSE, method = 'loess', formula = 'y ~ x') +
ylab("Predicted Risk") + theme_classic() +
facet_wrap(vars(name), scales = "free_x") +
ylim(c(0,NA))
df_with_predictions %>% select(all_of(analysis_vars)) %>% select_if(~is.numeric(.) & all(!(. %in% c(0,1)))) %>%
pivot_longer(-p.hat) %>%
ggplot(aes(x = value, y= p.hat)) +
geom_point(alpha = 0.1) +
geom_smooth(se = FALSE, show.legend = FALSE, method = 'loess', formula = 'y ~ x') +
ylab("Predicted Risk") + theme_classic() +
facet_wrap(vars(name), scales = "free_x") +
ylim(c(0,NA))
df_with_predictions %>% select(all_of(analysis_vars)) %>% select_if(~is.numeric(.) & all(!(. %in% c(0,1)))) %>%
pivot_longer(-p.hat) %>%
ggplot(aes(x = value, y= p.hat)) +
geom_point() +
geom_smooth(se = FALSE, show.legend = FALSE, method = 'loess', formula = 'y ~ x') +
ylab("Predicted Risk") + theme_classic() +
facet_wrap(vars(name), scales = "free_x") +
ylim(c(0,NA))
df_with_predictions %>% select(all_of(analysis_vars)) %>% select_if(~is.numeric(.) & all(!(. %in% c(0,1)))) %>%
pivot_longer(-p.hat) %>%
ggplot(aes(x = value, y= p.hat)) +
# geom_point() +
geom_smooth(se = FALSE, show.legend = FALSE, method = 'loess', formula = 'y ~ x') +
ylab("Predicted Risk") + theme_classic() +
facet_wrap(vars(name), scales = "free_x") +
ylim(c(0,NA))
df_with_predictions %>% select(all_of(analysis_vars)) %>% select_if(~is.numeric(.) & all(!(. %in% c(0,1)))) %>%
pivot_longer(-p.hat) %>%
ggplot(aes(x = value, y= p.hat)) +
geom_point() +
geom_smooth(se = FALSE, show.legend = FALSE, method = 'loess', formula = 'y ~ x') +
ylab("Predicted Risk") + theme_classic() +
facet_wrap(vars(name), scales = "free_x") +
ylim(c(0,NA))
df_with_predictions %>% select(all_of(analysis_vars)) %>% select_if(~is.numeric(.) & all(!(. %in% c(0,1)))) %>%
pivot_longer(-p.hat) %>%
ggplot(aes(x = value, y= p.hat)) +
# geom_point() +
geom_smooth(se = FALSE, show.legend = FALSE, method = 'loess', formula = 'y ~ x') +
ylab("Predicted Risk") + theme_classic() +
facet_wrap(vars(name), scales = "free_x") +
ylim(c(0,NA))
source("C:/rs/OneDrive - Johns Hopkins/rfslamtools/rfslamtools/R/rf_functions_p1.R", echo=TRUE)
source("C:/rs/OneDrive - Johns Hopkins/rfslamtools/rfslamtools/R/rf_functions_p1.R", echo=TRUE)
source("C:/rs/OneDrive - Johns Hopkins/rfslamtools/rfslamtools/R/rf_functions_p2.R", echo=TRUE)
library(rfslamtools)
